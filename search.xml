<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI version “Mining” system for AIGC: Take stable diffusion image generation model as a example</title>
    <url>/2024/03/12/AI-version-%E2%80%9CMining%E2%80%9D-system-for-AIGC-Take-stable-diffusion-image-generation-model-as-a-example/</url>
    <content><![CDATA[<h1 id="AI-version-“Mining”-system-for-AIGC-Take-stable-diffusion-image-generation-model-as-a-example"><a href="#AI-version-“Mining”-system-for-AIGC-Take-stable-diffusion-image-generation-model-as-a-example" class="headerlink" title="AI version “Mining” system for AIGC: Take stable diffusion image generation model as a example"></a>AI version “Mining” system for AIGC: Take stable diffusion image generation model as a example</h1><p>英文来自于Notion 机器翻译</p>
<p>介于现在AIGC模型的兴起，如果我们要生成一张图片，一些人在计算机算力上是非常缺失的，而另一些人却拥有非常多的计算机算力。此外，AI应用中，70%左右的算力都应用在了推演中。所以我在想，是否可以设计一个类似于以太币挖矿。我们可以用数字货币购买gas，而购买gas约等于购买算力和存储空间，然后我们便可以用gas部署我们的AI智能合约(Smart contract)。</p>
<p>With the rise of AIGC models, if we want to generate an image, some people are very lacking in computer computing power, while others have a lot of computer computing power. Moreover, in AI applications, about 70% of the computing power is applied in inference. So I’m wondering if we could design something similar to Ethereum mining. We can buy gas with cryptocurrency, and purchasing gas is approximately equivalent to buying computing power and storage space. Then we can use the gas to deploy our AI smart contracts.</p>
<p>由于运行合约的时候，模型可能会被拆分到各台机器中运行，而可被拆分的模型是一个新兴的研究方向，如 <a href="https://arxiv.org/abs/2212.13345">Forward-Forward Algorithm</a>和我的<a href="https://ieeexplore.ieee.org/document/10332073">DFF: Distributed Forward-Forward Algorithm</a>论文。目前研究的并不是很完善。因此，我们在这里将 stable diffusion model中的steps作为被分割的对象。即，我们将每一个step分割到各个机器中运行，如下图：</p>
<p>When running contracts, the model may be split into different machines for operation, and a model that can be split is a new research direction, such as the <strong><a href="https://arxiv.org/abs/2212.13345">Forward-Forward Algorithm</a></strong> and my <strong><a href="https://ieeexplore.ieee.org/document/10332073">DFF: Distributed Forward-Forward Algorithm</a></strong> paper. The current research is not complete. Therefore, we will use the steps in the stable diffusion model as the split objects here. That is, we will split each step into different machines for operation, as shown in the figure below:</p>
<p><img src="/images/ai_miner.drawio.png" alt="ai_miner.drawio.png"></p>
<p>想在完成这套系统主要存在的问题有：（以后还会补充）</p>
<ol>
<li>如何将通用的问题切割成小问题？</li>
<li>如果是要训练模型，训练的时候数据集又怎么处理？</li>
<li>每一个Node中如何评价是否“挖到”了我们希望得到的模型结果？</li>
<li>如何backpropagation？需要backpropagation吗？</li>
<li>如何解决并发的问题，如何将模型设计成并发推演或训练的？</li>
</ol>
<p>The main problems that exist in completing this system are: (will be supplemented later)</p>
<ol>
<li>How to split general problems into smaller problems?</li>
<li>If it is to train the model, how to handle the dataset during training?</li>
<li>How to evaluate in each Node whether we have “mined” the model results we hope to get?</li>
<li>How to backpropagate? Is backpropagation needed?</li>
<li>How to solve concurrency issues, and how to design the model for concurrent inference or training?</li>
</ol>
]]></content>
      <tags>
        <tag>Brainstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>[CVPR 2024] YOLO-World:Open-vocabulary Object Detection(OVOD)</title>
    <url>/2024/05/20/CVPR-2024-YOLO-World-Open-vocabulary-Object-Detection-OVOD/</url>
    <content><![CDATA[<p><a href="https://arxiv.org/abs/2401.17270">YOLO-World: Real-Time Open-Vocabulary Object Detection</a></p>
<p><a href="https://github.com/AILab-CVC/YOLO-World/blob/master/yolo_world/models/layers/yolo_bricks.py">https://github.com/AILab-CVC/YOLO-World/blob/master/yolo_world/models/layers/yolo_bricks.py</a></p>
<p><img src="/images/yoloworld/YW.png"></p>
<p><img src="/images/yoloworld/YW%201.png"></p>
<p><strong>Open Vocabulary Object Detection</strong></p>
<p>Open-vocabulary detection (OVOD) aims to generalize beyond the limited number of base classes labeled during the training phase. The goal is to detect novel classes defined by an unbounded (open) vocabulary at inference. [From <a href="https://paperswithcode.com/task/open-vocabulary-object-detection">link</a>]</p>
<h3 id="Novelty"><a href="#Novelty" class="headerlink" title="Novelty"></a><strong>Novelty</strong></h3><p><img src="/images/yoloworld/YW%202.png"></p>
<p><img src="/images/yoloworld/YW%203.png" alt="Traditional Object Detector"></p>
<p><strong>Traditional Object Detector</strong></p>
<p><img src="/images/yoloworld/YW%204.png" alt="Previous Open-Vocabulary Detector"></p>
<p>Previous Open-Vocabulary Detector</p>
<h1 id="YOLO-World-Model-Architecture"><a href="#YOLO-World-Model-Architecture" class="headerlink" title="YOLO-World Model Architecture"></a>YOLO-World Model Architecture</h1><p><img src="/images/yoloworld/YW%205.png"></p>
<p><strong>Text Encoder(Clip)</strong></p>
<p><img src="/images/yoloworld/YW%206.png"></p>
<p><strong>YOLO Detector</strong></p>
<p>YOLOv8 Backbone</p>
<p><img src="/images/yoloworld/YW%203.png" alt="Untitled"></p>
<ul>
<li>  <img src="/images/yoloworld/YW%207.png" alt="Untitled"></li>
</ul>
<p><strong>Re-parameterizable Vision-Language Path Aggregation Network (Vision-Language PAN)</strong></p>
<p><img src="/images/yoloworld/YW%208.png" alt="Untitled"></p>
<p><strong>Text-guided CSPLayer(T-CSPLayer)</strong></p>
<p><strong>Dark Bottkneck(C2f Layer)</strong></p>
<p><img src="/images/yoloworld/YW%209.png"></p>
<p><strong>From: <a href="https://openmmlab.medium.com/dive-into-yolov8-how-does-this-state-of-the-art-model-work-10f18f74bab1">https://openmmlab.medium.com/dive-into-yolov8-how-does-this-state-of-the-art-model-work-10f18f74bab1</a></strong></p>
<p><strong>Max-Sigmoid</strong></p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>X</mi><mi>l</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>=</mo><msub><mi>X</mi><mi>l</mi></msub><mo>⋅</mo><mi>δ</mi><msup><mrow><mo fence="true">(</mo><msub><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>j</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1..</mn><mi>C</mi><mo stretchy="false">}</mo></mrow></msub><mrow><mo fence="true">(</mo><msub><mi>X</mi><mi>l</mi></msub><msubsup><mi>W</mi><mi>j</mi><mi mathvariant="normal">⊤</mi></msubsup><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi mathvariant="normal">⊤</mi></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">X_l^{\prime}=X_l \cdot \delta\left(\max _{j \in\{1 . . C\}}\left(X_l W_j^{\top}\right)\right)^{\top},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035em;vertical-align:-0.2831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4169em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.4838em;vertical-align:-0.3948em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">∈</span><span class="mopen mtight">{</span><span class="mord mtight">1..</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mclose mtight">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4413em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3948em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.089em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span></span></span></span>

<p><strong>Image-Pooling Attention(I-Pooling Attention)</strong></p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>W</mi><mo>+</mo><mtext> MultiHead-Attention </mtext><mo stretchy="false">(</mo><mi>W</mi><mo separator="true">,</mo><mover accent="true"><mi>X</mi><mo>~</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>X</mi><mo>~</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W^{\prime}=W+\text { MultiHead-Attention }(W, \tilde{X}, \tilde{X})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1702em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord"> MultiHead-Attention </span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>

<p><strong>Text Contrastive Head</strong></p>
<p><strong>Region-Text Matching</strong></p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo>=</mo><mi>α</mi><mo lspace="0em" rspace="0em">⋅</mo><mi>L</mi><mn>2</mn><mtext>-</mtext><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>L</mi><mn>2</mn><mtext>-</mtext><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mi>j</mi></msub><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>+</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">Sk,j = {\alpha}{\cdot}L2\text{-}Norm(e_k)\cdot L2\text{-}Norm(w_j)^T + \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span><span class="mord"><span class="mord">⋅</span></span><span class="mord mathnormal">L</span><span class="mord">2</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1274em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord">2</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span> <br />

<h3 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h3><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">L</mi><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi mathvariant="script">L</mi><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">n</mi></mrow></msub><mo>+</mo><msub><mi>λ</mi><mi>I</mi></msub><mo>⋅</mo><mrow><mo fence="true">(</mo><msub><mi mathvariant="script">L</mi><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">u</mi></mrow></msub><mo>+</mo><msub><mi mathvariant="script">L</mi><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">l</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathcal{L}(I)=\mathcal{L}_{\mathrm{con}}+\lambda_I \cdot\left(\mathcal{L}_{\mathrm{iou}}+\mathcal{L}_{\mathrm{dfl}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">con</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3175em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">iou</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">dfl</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> <br />

<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathcal{L}_{\mathrm{con}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">con</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is region-text contrastive loss <br />

<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">u</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathcal{L}_{\mathrm{iou}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3175em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">iou</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is IoU loss <br />


<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathcal{L}_{\mathrm{dfl}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">dfl</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is distributed focal loss <br />


<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">\lambda_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is an indicator factor and set to 1 when input image I is from detection or grounding data and set to 0 when it is from the image-text data.

]]></content>
  </entry>
  <entry>
    <title>Combat Effectiveness(CE) Detection</title>
    <url>/2023/03/23/Combat-Effectiveness-CE-Detection/</url>
    <content><![CDATA[<h1 id="Combat-Effectiveness-Detection-using-YOLOv8-and-Tensorflow-js"><a href="#Combat-Effectiveness-Detection-using-YOLOv8-and-Tensorflow-js" class="headerlink" title="Combat Effectiveness Detection using YOLOv8 and Tensorflow.js"></a>Combat Effectiveness Detection using YOLOv8 and Tensorflow.js</h1><p align="center">
  <img src="/images/ce.jpg" />
</p>

<p><img src="https://img.shields.io/badge/Made%20with-%F0%9F%96%A4-white" alt="love"><br><img src="https://img.shields.io/badge/tensorflow.js-white?logo=tensorflow" alt="tensorflow.js"></p>
<hr>
<p>Combat Effectveness Detection application right in your browser. Serving YOLOv8 in browser using tensorflow.js<br>with <code>webgl</code> backend.</p>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p><a href="https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/">Check it!</a></p>
<ul>
<li><a href="https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/">https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/</a></li>
</ul>
<p><strong>Setup</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dengbuqi/Combat-Effectiveness-Detection_yolov8-tfjs</span><br><span class="line"><span class="built_in">cd</span> Combat-Effectiveness-Detection_yolov8-tfjs</span><br><span class="line">yarn install <span class="comment">#Install dependencies</span></span><br></pre></td></tr></table></figure>

<p><strong>Scripts</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn start <span class="comment"># Start dev server</span></span><br><span class="line">yarn build <span class="comment"># Build for productions</span></span><br></pre></td></tr></table></figure>

<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>YOLOv8n model converted to tensorflow.js.</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">used model : <span class="type">yolov8n</span></span><br><span class="line">size       : 13 <span class="type">Mb</span></span><br></pre></td></tr></table></figure>

<p><strong>Use another model</strong></p>
<p>Use another YOLOv8 model.</p>
<ol>
<li><p>Export YOLOv8 model to tfjs format. Read more on the <a href="https://docs.ultralytics.com/tasks/detection/#export">official documentation</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># load an official model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Export the model</span></span><br><span class="line">model.export(<span class="built_in">format</span>=<span class="string">&quot;tfjs&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Copy <code>yolov8*_web_model</code> to <code>./public</code></p>
</li>
<li><p>Update <code>modelName</code> in <code>App.jsx</code> to new model name</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// model configs</span></span><br><span class="line"><span class="keyword">const</span> modelName = <span class="string">&quot;yolov8*&quot;</span>; <span class="comment">// change to new model name</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>Done! 😊</p>
</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/ultralytics/ultralytics">https://github.com/ultralytics/ultralytics</a></li>
<li><a href="https://github.com/Hyuto/yolov8-onnxruntime-web">https://github.com/Hyuto/yolov8-onnxruntime-web</a></li>
<li><a href="https://github.com/Hyuto/yolov8-tfjs">https://github.com/Hyuto/yolov8-tfjs</a></li>
</ul>
]]></content>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>ComfyUI-based Decentralized Content Generation Platform</title>
    <url>/2024/10/02/ComfyUI-based-Decentralized-Content-Generation-Platform/</url>
    <content><![CDATA[<!-- # 基于ComfyUI的去中性化的内容生成平台 ComfyUI-based Decentralized Content Generation Platform -->

<h1 id="1-ComfyUI"><a href="#1-ComfyUI" class="headerlink" title="1. ComfyUI"></a>1. ComfyUI</h1><p><a href="https://github.com/comfyanonymous/ComfyUI">https://github.com/comfyanonymous/ComfyUI</a></p>
<p>在介绍我们去中心化的内容生成平台之前，我们先介绍一下ComfyUI是什么，以及他的理念。</p>
<p>ComfyUI—<strong>The most powerful and modular diffusion model GUI and backend.</strong> </p>
<p>Before introducing our decentralized content generation platform, let’s explain what ComfyUI is and its concept firstly.</p>
<p>ComfyUI—<strong>The most powerful and modular diffusion model GUI and backend.</strong></p>
<p><img src="/images/dcomfyui/image.png" alt="image.png"></p>
<p>从它的介绍可知，它是一个让你在stable diffusion等大量生成模型之间设计一条满足自己工作流程需要的框架。每一个模型或者数据操作被设计成了一个个node被允许添加到你们的工作流中。在这里你可以结合各种模型之间的优势，在本地构建自己特色的内容生成工作流。包括但不止text2img, img2img, impating, lora 等工作流。</p>
<p>From its description, we can see that it is a framework that allows you to design a workflow that meets your needs among a large number of generative models such as stable diffusion. Each model or data operation is designed as a node that can be added to your workflow. Here you can combine the advantages of various models to build your own unique content generation workflow locally. This includes but is not limited to, text2img, img2img, inpainting, lora, and other workflows.</p>
<h1 id="2-ComfyUI痛点-ComfyUI-Pain-Points"><a href="#2-ComfyUI痛点-ComfyUI-Pain-Points" class="headerlink" title="2. ComfyUI痛点 ComfyUI Pain Points"></a>2. ComfyUI痛点 ComfyUI Pain Points</h1><p>但是，ComfyUi也存在一个巨大的痛点，那就是如果你的工作流中运行了大量的模型，那么你将需要一台超高性能的电脑来同时运行这些模型。现实是我们个人可能运行工作流中的一个或一些模型。</p>
<p>However, ComfyUI also has a significant pain point. If your workflow runs a large number of models, you will need a high-performance computer to run these models on one local computer. The reality is that we as individuals may only be able to run one or a few models in the workflow in our PC.</p>
<p><img src="/images/dcomfyui/image%201.png" alt="image.png"></p>
<h1 id="3-去中性化的ComfyUI-Decentralized-ComfyUI"><a href="#3-去中性化的ComfyUI-Decentralized-ComfyUI" class="headerlink" title="3. 去中性化的ComfyUI Decentralized ComfyUI"></a>3. 去中性化的ComfyUI Decentralized ComfyUI</h1><p>得益于ComfyUI的设计，我们其实可以把工作流中的每一个node看作一个独立的个体使用。那么我们为什么要在不同的电脑中创建同样的node呢？这完全是一中算力的浪费。试想，我的电脑只够我运行A模型node，而Smith的电脑够运行B模型node，Jone则是C模型node。如果我的工作流程需要A，B，C这四个node,那是不是我可以借用Smith和Jone的算力便可运行？同样的Smith和Jone也可以使用我的node运行他们想要的工作流。唯一需要的就是我们node作为API服务暴露给各位。</p>
<p>Thanks to ComfyUI’s design, we can actually treat each node in the workflow as an independent entity. So why should we create the same nodes on different computers? This is a complete waste of computing power. Imagine if my computer is only capable of running model node A, while Smith’s computer can run model node B, and Jones can run model node C. If my workflow requires nodes A, B, and C, could I borrow the computing power from Smith and Jones to run it? Correspondingly, Smith and Jones could also use my node to run the workflows they want. The only thing needed for us is to expose our nodes as API services to everyone.</p>
<p><img src="/images/dcomfyui/DComfyU.drawio.png" alt="DComfyU.drawio.png"></p>
<h1 id="4-如何构建去中性化的ComfyUI-How-to-Build-a-Decentralized-ComfyUI"><a href="#4-如何构建去中性化的ComfyUI-How-to-Build-a-Decentralized-ComfyUI" class="headerlink" title="4. 如何构建去中性化的ComfyUI How to Build a Decentralized ComfyUI"></a>4. 如何构建去中性化的ComfyUI How to Build a Decentralized ComfyUI</h1><p>在我的计划中，我们应该是高度依赖ComfyUI或者它的node思想来构建我们的去中性化平台。主要的设计有下面几点:</p>
<p>In my plan, we should heavily rely on ComfyUI or its node concept to build our decentralized platform. The main designs include the following points:</p>
<h2 id="1-ComfyUI-API-service-node-服务节点-ComfyUI-API-Service-Node"><a href="#1-ComfyUI-API-service-node-服务节点-ComfyUI-API-Service-Node" class="headerlink" title="1. ComfyUI API service node 服务节点 ComfyUI API Service Node"></a>1. ComfyUI API service node 服务节点 ComfyUI API Service Node</h2><p>我们可以基于ComfyUI的特性，直接构建API service node 节点，尝试将其他模型的节点node自动打包成一个个的API service暴露给其他使用者。</p>
<p>Based on ComfyUI’s features, we can directly build API service nodes, attempting to automatically package the other model’s nodes into individual API services exposed to other users.</p>
<h2 id="2-Node-management-center-节点管理中心-Node-Management-Center"><a href="#2-Node-management-center-节点管理中心-Node-Management-Center" class="headerlink" title="2. Node management center 节点管理中心 Node Management Center"></a>2. Node management center 节点管理中心 Node Management Center</h2><p>虽然我们可以自己构建很多ComfyUI API service node节点，但是大部分人是不具备公有IP将自己的服务暴露在。我们应该构建一个节点管理中心，管理服务节点的同时，转发各个私有IP服务节点，暴露给其他用户。而使用者也可以通过管理中心使用自己想要的节点服务。</p>
<p>Although we can build many ComfyUI API service nodes ourselves, most people do not have a public IP to expose their services. We should build a node management center that manages service nodes while forwarding various private IP service nodes, exposing them to other users. Users can also use the node services they want through the management center.</p>
<h2 id="3-Security-use-tokens-data-transmission-crypto-anonymous-and-so-on-安全-tokens-数据传输加密，匿名化等等-Security-use-tokens-data-transmission-crypto-anonymous-and-so-on"><a href="#3-Security-use-tokens-data-transmission-crypto-anonymous-and-so-on-安全-tokens-数据传输加密，匿名化等等-Security-use-tokens-data-transmission-crypto-anonymous-and-so-on" class="headerlink" title="3. Security (use tokens, data transmission crypto, anonymous, and so on) 安全(tokens, 数据传输加密，匿名化等等) Security (use tokens, data transmission crypto, anonymous, and so on)"></a>3. Security (use tokens, data transmission crypto, anonymous, and so on) 安全(tokens, 数据传输加密，匿名化等等) Security (use tokens, data transmission crypto, anonymous, and so on)</h2><p>节点管理中心构建成功的化，接下来我们就需要在服务节点，管理中心，使用者之间构建安全可靠的通信服务。token认证，传输数据加，匿名化等都需要我们提供支持。</p>
<p>If the node management center is successfully built, we then need to build secure and reliable communication services between service nodes, management centers, and users. We need to provide support for token authentication, data transmission encryption, anonymization, and more.</p>
<h2 id="4-Payment-Strategy-cyber-currency-Onlie-payment-Credit-cart-支付策略-加密货币，-在线支付，-信用卡-Payment-Strategy-cryptocurrency-Online-payment-Credit-card"><a href="#4-Payment-Strategy-cyber-currency-Onlie-payment-Credit-cart-支付策略-加密货币，-在线支付，-信用卡-Payment-Strategy-cryptocurrency-Online-payment-Credit-card" class="headerlink" title="4. Payment Strategy(cyber currency? Onlie payment? Credit cart?) 支付策略(加密货币， 在线支付， 信用卡) Payment Strategy (cryptocurrency? Online payment? Credit card?)"></a>4. Payment Strategy(cyber currency? Onlie payment? Credit cart?) 支付策略(加密货币， 在线支付， 信用卡) Payment Strategy (cryptocurrency? Online payment? Credit card?)</h2><p>为了更大化的推广我们的去中心化节点，利益当然是最大的推手。我们需要节点的使用者支付一定的费用给节点的提供者，同时节点管理中心也需要一定的资金支持服务器和电信服务的费用。这样子才可以促进整个社区的正向发展。</p>
<p>To maximize the promotion of our decentralized nodes, profit is certainly the biggest driver. We need node users to pay a certain fee to node providers, and the node management center also needs some funds to support server and telecommunication service costs. By this way, we can promote the positive development of the entire community.</p>
<h2 id="5-Everyone-can-make-money-and-everyone-can-use-large-computing-power-services-每个人都可以通过它挣钱，每个人都可以使用大计算量的服务"><a href="#5-Everyone-can-make-money-and-everyone-can-use-large-computing-power-services-每个人都可以通过它挣钱，每个人都可以使用大计算量的服务" class="headerlink" title="5. Everyone can make money, and everyone can use large computing power services 每个人都可以通过它挣钱，每个人都可以使用大计算量的服务"></a>5. Everyone can make money, and everyone can use large computing power services 每个人都可以通过它挣钱，每个人都可以使用大计算量的服务</h2><p>至此，每一个人都可以使用自己的电脑搭建一个节点来获得收益，而大家也可以任意的使用最大量的算力生成自己想要的内容。</p>
<p>Therefore, everyone can use their computer to set up a node to earn income, and everyone can use the maximum amount of computing power to generate the content they want.</p>
<h1 id="5-另外-Moreover"><a href="#5-另外-Moreover" class="headerlink" title="5. 另外 Moreover"></a>5. 另外 Moreover</h1><p>另外， 虽然我们的平台是基于ComfyUI的概念，但是，我认为通过合理的设计，我们不但可以把这个平台使用到内容生成工作流中，我们可以应用到任何的AI模型工作流算力共享中。我们力求构建一个全球AI算力共享平台。或许以后还可以使用这个平台进行模型的训练和数据的收集等AI模型的前置 。</p>
<p>In addition, although our platform is based on the concept of ComfyUI, I believe that through reasonable design, we can not only use this platform in content generation workflows, but we can also apply it to any AI model workflow computing power sharing. We strive to build a global AI computing power sharing platform. Perhaps in the future, we can also use this platform for model training and data collection, and other AI model prerequisites.</p>
]]></content>
      <tags>
        <tag>Brainstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic Neural Architecture(DNA)</title>
    <url>/2024/08/16/Dynamic-Neural-Architecture-DNA/</url>
    <content><![CDATA[<h1 id="Dynamic-Neural-Architecture-DNA"><a href="#Dynamic-Neural-Architecture-DNA" class="headerlink" title="Dynamic Neural Architecture(DNA)"></a>Dynamic Neural Architecture(DNA)</h1><p>Check out my project on <a href="https://github.com/dengbuqi/DNA">GitHub</a> <svg viewBox="0 0 16 16" width="16" height="16" fill="currentColor" class="octicon octicon-mark-github" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.54 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.22 2.2.82A7.7 7.7 0 0 1 8 4.77a7.7 7.7 0 0 1 2.01.27c1.52-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path></svg></p>
<p>This is my little research project. I try to make a dynamic neural network with one layer for decentralized artificial intelligence(DAI) purpose. We can dynamic delete and create neural cell node. This idea is inspired by Hebbian theory. I am not sure is will work or not. Let’s see!</p>
<h2 id="Fire-together-wire-together-Hebbian-theory"><a href="#Fire-together-wire-together-Hebbian-theory" class="headerlink" title="Fire together wire together(Hebbian theory)"></a>Fire together wire together(Hebbian theory)</h2><p>Let us assume that the persistence or repetition of a reverberatory activity (or “trace”) tends to induce lasting cellular changes that add to its stability. … When an axon of cell A is near enough to excite a cell B and repeatedly or persistently takes part in firing it, some growth process or metabolic change takes place in one or both cells such that A’s efficiency, as one of the cells firing B, is increased. </p>
<p>– From <a href="https://en.wikipedia.org/wiki/Hebbian_theory">Hebbian theory</a></p>
<p>So, In my understanding, for a AI model neural, let’s say the assumption of <strong>‘the persistence or repetition of a reverberatory activity’</strong> is the training process, the <strong>‘cell’</strong> is a neural structure int the model, <strong>‘When an axon of cell A is near enough to excite a cell B and repeatedly or persistently takes part in firing it, some growth process or metabolic change takes place in one or both cells such that A’s efficiency, as one of the cells firing B, is increased.’</strong> means if neural A is activated, A will active(fire) neural B sequently. </p>
<h2 id="How-about-to-make-a-AI-model-base-on-this-theory"><a href="#How-about-to-make-a-AI-model-base-on-this-theory" class="headerlink" title="How about to make a AI model base on this theory."></a>How about to make a AI model base on this theory.</h2><p>Before I design my model, I try to modify some rule in Hebbian theory. In Hebbian theory, cell A will be activated before B, then cell B will be activated by cell A. But, to make a parallel architecture for my future plan about my decentralized model. I am going to activate neural A and neral B. Because In my opinion, they will finally be activated for a same activity no matter the order.</p>
<h2 id="Neural-cell"><a href="#Neural-cell" class="headerlink" title="Neural cell"></a>Neural cell</h2><p>So. In my idea, neural cell can be assumed as a weighted signal function minus a signal leaking[<a href="https://en.wikipedia.org/wiki/Hodgkin%E2%80%93Huxley_model">Hodgkin–Huxley model</a>].</p>
<center>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>=</mo><msub><mi>C</mi><mi>m</mi></msub><mfrac><mrow><mi mathvariant="normal">d</mi><msub><mi>V</mi><mi>m</mi></msub></mrow><mrow><mrow><mtext> </mtext><mi mathvariant="normal">d</mi></mrow><mi>t</mi></mrow></mfrac><mo>+</mo><msub><mi>g</mi><mi>K</mi></msub><mrow><mo fence="true">(</mo><msub><mi>V</mi><mi>m</mi></msub><mo>−</mo><msub><mi>V</mi><mi>K</mi></msub><mo fence="true">)</mo></mrow><mo>+</mo><msub><mi>g</mi><mrow><mi>N</mi><mi>a</mi></mrow></msub><mrow><mo fence="true">(</mo><msub><mi>V</mi><mi>m</mi></msub><mo>−</mo><msub><mi>V</mi><mrow><mi>N</mi><mi>a</mi></mrow></msub><mo fence="true">)</mo></mrow><mo>+</mo><msub><mi>g</mi><mi>l</mi></msub><mrow><mo fence="true">(</mo><msub><mi>V</mi><mi>m</mi></msub><mo>−</mo><msub><mi>V</mi><mi>l</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I=C_m \frac{\mathrm{d} V_m}{\mathrm{~d} t}+g_K\left(V_m-V_K\right)+g_{N a}\left(V_m-V_{N a}\right)+g_l\left(V_m-V_l\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2412em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8962em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mspace nobreak mtight"><span class="mtight"> </span></span><span class="mord mathrm mtight">d</span></span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.2222em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>
</center>

<p><strong>So, our neural cell can be simplified as -&gt;</strong></p>
<center>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>=</mo><mi>w</mi><msub><mi>V</mi><mi>m</mi></msub><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">I=wV_m-b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>
</center>

<p>Yes, we can also replace thie simple function to a complicate function such as <a href="https://arxiv.org/html/2404.19756v1">KAN</a> model.</p>
<h2 id="Can-it-work"><a href="#Can-it-work" class="headerlink" title="Can it work?"></a>Can it work?</h2><p>In common, the <strong>universal approximation theorem</strong> said a feed-forward network with a single hidden layer containing a finite number of neurons can approximate any continuous function. So, I think If we have enough neural cell, we can approximate any continuous function. Meanwhile, according the <strong>Kolmogorov–Arnold representation theorem</strong>, every multivariate continuous function. can be represented as a superposition of the two-argument addition of continuous functions of one variable, we can make many simple many to one neural cells for each variable to represent any continuous function. <span style="color:red">[Mybe I was wrong.]</span></p>
<h1 id="Create-and-delete-neural-cell"><a href="#Create-and-delete-neural-cell" class="headerlink" title="Create and delete neural cell"></a>Create and delete neural cell</h1><p>Yes, In my DNA system, the neural cells will be dynamically created or deleted. </p>
<p><strong>Neural cell creation</strong></p>
<p>It’s a simulation of ‘fire together wire together’. When the passthrough(we consider it as the weight $w_A$) is large in neural cell A, we need to create a branch neural cell B to enhance this signal. Once we crate the neural cell B. A and B will equally share the passthrough<br>which means the initialization will be:</p>
<center>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>A</mi></msub><mo>=</mo><mn>0.5</mn><mo>×</mo><msub><mi>w</mi><mi>A</mi></msub><mo separator="true">;</mo><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>A</mi></msub><mo>=</mo><msub><mi>b</mi><mi>A</mi></msub><mo separator="true">;</mo><mspace linebreak="newline"></mspace><msub><mi>w</mi><mi>B</mi></msub><mo>=</mo><mn>0.5</mn><mo>×</mo><msub><mi>w</mi><mi>B</mi></msub><mo separator="true">;</mo><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>B</mi></msub><mo>=</mo><mn>0</mn><mo separator="true">;</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">w_A = 0.5 \times w_A; \\

b_A = b_A; \\

w_B = 0.5 \times w_B; \\

b_B = 0; \\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">;</span></span><span class="mspace newline"></span></span></span>
</center>

<p><strong>Neural cell deletion</strong></p>
<p>On the opposite, we also need to delete the very less passthrough’s neural cell. We will just delete it and it’s input and output relation with other neural cells.</p>
<p><strong>But how</strong></p>
<p>Well, I still struggle in how to make a rule to tell us when we need to create the neural cells and when we need to delete the neural cells.</p>
<p>My naive idea for now is just create the new branch for top 10% high passthrough neural cells and delete the bottom 10% low passthrough neural cells. <span style="color:red">[TBD, need rethinking]</span></p>
<p><strong>But When(Extinction)</strong></p>
<p>In my plan, the neural creation and deletion process(sounds like model pruning) will be implement when we finish n epochs train and the loss not going down for more k epochs(refer the <a href="https://en.wikipedia.org/wiki/Early_stopping">early stopping</a> method, but we do not stop). And I name this process as a new term – ‘extinction’. It will be like, we have gone through many epochs in the history of our earth, and in some epochs we have met the species mass extinctions and entered another thriving epoch. Our DNA model, also, after n epochs, the model undergoes a mass extinction of neural cells, then the model enters to a new thriving epoch.</p>
<h1 id="Model-structure-initialization"><a href="#Model-structure-initialization" class="headerlink" title="Model structure initialization"></a>Model structure initialization</h1><p>Before we train DNA model, we need to confirm the initial model structure. The initial model will just be like a Fully connected layer but each node in this layer is the single valuable(signal) and each edge in this layer is neural cell.<br>Beside, each neural cell’s trainable parameters $w$ and $b$ will be set to 1 and 0 respectively.</p>
<p>| <img src="https://builtin.com/sites/www.builtin.com/files/styles/ckeditor_optimize/public/inline-images/3_fully-connected-layer_0.jpg" alt="DNA model layer"> | </p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul>
<li><input disabled="" type="checkbox"> Neural cell class</li>
<li><input disabled="" type="checkbox"> Model data structure to manage each neural cell’s input and output</li>
<li><input disabled="" type="checkbox"> Neural cell creation function</li>
<li><input disabled="" type="checkbox"> Neural cell deletion function</li>
<li><input disabled="" type="checkbox"> Extinction function</li>
<li><input disabled="" type="checkbox"> Training example</li>
<li><input disabled="" type="checkbox"> Result evaluation</li>
</ul>
<h1 id="Next-level"><a href="#Next-level" class="headerlink" title="Next level"></a>Next level</h1><ul>
<li><input disabled="" type="checkbox"> Forward-Forward algorithm or backpropagation-free method implement</li>
<li><input disabled="" type="checkbox"> Neural cell distributing on different device(DAI).</li>
<li><input disabled="" type="checkbox"> Self-perception, self-learning, and self-evolution.</li>
</ul>
]]></content>
      <tags>
        <tag>Brainstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Heartbeat-Estimation</title>
    <url>/2023/03/23/Heartbeat-Estimation/</url>
    <content><![CDATA[<h1 id="heartbeat-js-FaceAPI-heart-pulse-rate-monitoring"><a href="#heartbeat-js-FaceAPI-heart-pulse-rate-monitoring" class="headerlink" title="heartbeat-js + FaceAPI heart pulse rate monitoring"></a>heartbeat-js + FaceAPI heart pulse rate monitoring</h1><p>This project combines the <a href="https://github.com/prouast/heartbeat-js">heartbeat-js</a> and <a href="https://github.com/justadudewhohacks/face-api.js/">FaceAPI</a><br>By detecting the human face using FaceAPI, we can estimate the heart pulse rate using rPPG method implemented by hearbeat-js project.</p>
<p align="center">
  <img src="/images/heartbeat.jpg" />
</p>

<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>Check the demo <a href="https://dengbuqi.github.io/heartbeat-js-FaceAPI/">here~</a></p>
]]></content>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>My Little Projects</title>
    <url>/2024/03/17/My-Little-Projects/</url>
    <content><![CDATA[<p><a href="https://dengbuqi.github.io/life_counter/"><strong>Life Goal Counter</strong></a><br><a href="https://dengbuqi.github.io/life_counter/"><img src="/images/life_counter.png" alt="life_counter"></a></p>
<p><a href="https://dengbuqi.github.io/bookofanswers/"><strong>Book of Answers</strong></a><br><a href="https://dengbuqi.github.io/bookofanswers/"><img src="/images/bookofanswers.png" alt="bookofanswers"></a></p>
<p><a href="https://dengbuqi.github.io/cell_yolov8-seg-tfjs/"><strong>Cell Segmentation Application Using YOLOv8</strong></a><br><a href="https://dengbuqi.github.io/cell_yolov8-seg-tfjs/"><img src="/images/cell_yolov8-seg.png" alt="cell_yolov8-seg"></a></p>
<p><a href="https://dengbuqi.github.io/cell_yolov8-tfjs/"><strong>Cell Detection Application Using YOLOv8</strong></a><br><a href="https://dengbuqi.github.io/cell_yolov8-tfjs/"><img src="/images/cell_yolov8-det.png" alt="cell_yolov8-det"></a></p>
<p><a href="https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/"><strong>Combat Effectiveness Detection using YOLOv8 and Tensorflow.js</strong></a><br><a href="https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/"><img src="/images/ce.jpg" alt="CE_Det"></a></p>
<p><a href="https://dengbuqi.github.io/heartbeat-js-FaceAPI/"><strong>Heartbeat-Estimation</strong></a><br><a href="https://dengbuqi.github.io/heartbeat-js-FaceAPI/"><img src="/images/heartbeat.jpg" alt="HB_Det"></a></p>
]]></content>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>My rethink about Image generation and recognition</title>
    <url>/2024/03/12/My-rethink-about-Image-generation-and-recognition/</url>
    <content><![CDATA[<h1 id="My-rethink-about-Image-generation-and-recognition"><a href="#My-rethink-about-Image-generation-and-recognition" class="headerlink" title="My rethink about Image generation and recognition"></a>My rethink about Image generation and recognition</h1><p>英文部分是Notion机器翻译</p>
<p>人类的大脑是图像生成最利害的机器，虽然我们无法直接向外表现出来，但是我们可以在大脑中想象出千奇百怪的东西，甚至在我们的梦境中，我们可以完全畅游在自由想像的世界。</p>
<p>The human brain is the most potent image generation machine. Although we can’t express it directly, we can imagine all sorts of things in our brains. Even in our dreams, we can fully roam the world of free imagination.</p>
<p>但是，我们人类是如何在脑中生成这些东西的呢？在我的理解中，纵使我们可以想象出任何东西，但是这个“任何东西”，很难超过我们的认知范围，即我们常说的想象的局限性。</p>
<p>But how do we humans generate these things in our minds? In my understanding, though we can imagine anything, this “anything” is hard to exceed our cognitive range, which is often referred to as the limitation of imagination.</p>
<p>我认为我们拥有这种局限性的原因是因为我们需要先<strong>观察</strong>已有的事物，然后<strong>抽象</strong>和<strong>思考</strong>这个事物的特征，才能<strong>想象</strong>出基于这个事物部分特征的其他事物。</p>
<p>I believe we have this limitation because we need to <strong>observe</strong> existing things first, then <strong>abstract</strong> and <strong>think</strong> about the features of this thing, in order to <strong>imagine</strong> other things based on some features of this thing.</p>
<p>因此，如果我们遵从人类的思考方式创建AI模型的话，我假设模型分为3部分： 观察，想象和思考。</p>
<p>Therefore, if we create AI models following human thinking, I assume the model is divided into three parts: observation, imagination, and thinking.</p>
<p><img src="/images/humangen.drawio.png" alt="humangen.drawio.png"></p>
<p>上图就是我认为的一个人类大脑的思维逻辑，或者说是一种图像生成的AI模型的结构，该结构有点类似于GAN(Generative Adversarial Network)模型。</p>
<p>The above figure is what I think is the logic of human brain thinking, or the structure of an image generation AI model, which is somewhat similar to the GAN (Generative Adversarial Network) model.</p>
<p><strong>Observation</strong>: 我们将会观察真实图片，学习并提取真实图片的隐藏特征值(Hidden Feature)。</p>
<p><strong>Observation</strong>: We will observe real images, learn and extract the hidden features of real images.</p>
<p><strong>Hidden Feature</strong>: 观察到的特征值会被应用于两个方面，一方面是用于思考，一方面是用于生成图片。</p>
<p><strong>Hidden Feature</strong>: The observed features will be applied in two ways, one for thinking and one for generating images.</p>
<p><strong>Imagination</strong>: 我们通过总结到的Hidden Feature，可以试图生成一张新的图片，这张图片和原图Real image很相似，但是又不同，目的是为了生成一张能够让observation提取到和Real image相似特征的图片。</p>
<p><strong>Imagination</strong>: We can try to generate a new image through the summarized Hidden Feature. This image is similar to the original Real image, but different. The purpose is to generate an image that allows the observation to extract features similar to the Real image.</p>
<p>让我们重新回到我们人类的思考学习方式上，当我们牙牙学语时候，假设我们认识“车”这个单词，老师会给我们一张车的图片卡，然后反复教我们这个东西是“车”。当我们记住了这张图片和与之对应的单词“车”之后，神奇的一幕发生了，即便我们看到了另一个模样的车之后，我们仍然能够“猜”出这是车！而这样神奇的能力我认为可以归因于人类想象力。因为人类在看到“车”的图片卡之后，我们不但是学习了车这个图片的特征，还学习到了很多抽象的特征，比如车有四个轮子，有方向盘等等，并基于这些抽象特征，天马行空的想象出了不同的车，而这些想象出来的车的样子，也有利于我们去识别真正现实中的车。在通过N次的对真实图片和想象图片的观察之后，我们便能思考“车”是什么，同是也具备了想象车的样子的模型。如下图：</p>
<p>Let’s return to our human thinking learning mode. When we were babbling, suppose we knew the word “car”, the teacher would give us a picture card of a car, and repeatedly teach us that this thing is a “car”. After we remembered this picture and the corresponding word “car”, a miraculous scene happened. Even if we saw another car, we could still “guess” it was a car! I attribute such magical ability to human imagination. Because after seeing the picture card of the “car”, we not only learned the features of the car picture, but also learned many abstract features, such as the car has four wheels, a steering wheel, etc., and based on these abstract features, the sky-horse-like imagination came out. Different cars, and the appearance of these imagined cars, are also conducive to our identification of real cars in reality. After observing the real image and the imagined image for N times, we can think about what a “car” is, and also have a model that imagines the appearance of a car. As below:</p>
<p><img src="/images/baby_learn.drawio.png" alt="baby_learn.drawio.png"></p>
<p><strong>Thinking</strong>: 对于特征的思考，我们大致需要思考两个方面的问题：</p>
<p>图片是真的还是想象出来的？</p>
<p>一个真假二分类问题</p>
<p>图像描述的是什么？</p>
<p>一个NLP描述问题</p>
<p><strong>Thinking</strong>: For thinking about features, we generally need to think about two aspects:</p>
<p>Is the picture real or imagined?</p>
<p>A true or false binary classification problem</p>
<p>What does the image describe?</p>
<p>An NLP description problem</p>
<p>因此，基于这一套思维逻辑，我们或许能够制作一个one-shot或者few-shot的模型，通过反复观测(Observation)和想象(Imagination)同一张图片并对他们进行思考，我们或许能生三个模型：encoder，generator,和thinker三个模型。如下图：</p>
<p>Therefore, based on this set of thinking logic, we may be able to make a one-shot or few-shot model, through repeated Observation and Imagination of the same picture and thinking about them, we may be able to generate three models: encoder, generator, and thinker. As below:</p>
<p><img src="/images/aigen.drawio.png" alt="aigen.drawio.png"></p>
<p>Loss 的设计，当我们设计loss函数的时候，主要是帧对在Thinker模块的输出，Real和Fake和对应的NLP描述均可以设计对应的距离loss函数。</p>
<p>When designing the Loss function, it is mainly designed for the output of the Thinker module, both Real and Fake and the corresponding NLP description can design the corresponding distance loss function.</p>
<p>另外，我们还可以设计一个prompt编码模块，给我们的想象力加一点提示hint，从而更好的控制generator生成的内容。</p>
<p>Additionally, we can design a prompt encoding module to add a hint to our imagination, thereby better controlling the content generated by the generator.</p>
<p><img src="/images/aigen_with_prompt.drawio.png" alt="aigen_with_prompt.drawio.png"></p>
<p>以上便是我对于人类学习和AI学习的一点点思考。</p>
<p>The above is a little bit of my thinking about human learning and AI learning.</p>
]]></content>
      <tags>
        <tag>Brainstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>[범용 인공 지능의 미래]AGENT AI: SURVEYING THE HORIZONS OF MULTIMODAL INTERACTION</title>
    <url>/2024/04/03/agentAI/</url>
    <content><![CDATA[<h1 id="범용-인공-지능의-미래-AGENT-AI-SURVEYING-THE-HORIZONS-OF-MULTIMODAL-INTERACTION"><a href="#범용-인공-지능의-미래-AGENT-AI-SURVEYING-THE-HORIZONS-OF-MULTIMODAL-INTERACTION" class="headerlink" title="[범용 인공 지능의 미래]AGENT AI: SURVEYING THE HORIZONS OF MULTIMODAL INTERACTION"></a>[범용 인공 지능의 미래]AGENT AI: SURVEYING THE HORIZONS OF MULTIMODAL INTERACTION</h1><p><img src="/images/agnet_ai/Untitled.png" alt="Untitled"></p>
<p>On 25 Jan 2024, Stanford University, Microsoft Research, the University of California, Los Angeles and the University of Washington Co-published a surveying paper called: <strong>AGENT AI: SURVEYING THE HORIZONS OF MULTIMODAL INTERACTION</strong></p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract:"></a>Abstract:</h1><p>They try to draw the future of the <strong>Multi-modal AI systems</strong>. They present a new concept ‘<strong>Agent AI</strong>’, <strong>a promising avenue toward Artificial General Intelligence (AGI). (범용 인공 지능을 향한 유망한 길입니다.)</strong></p>
<p><strong>Agent AI system</strong> that can perceive and act in many different domains and applications, possibly serving as a route towards AGI using an agent <strong>paradigm(표준 양식])</strong>. — Figure 1</p>
<p><strong>How to use ubiquitous(어디에나 있는) multi-modal AI systems?</strong></p>
<p>Agents within physical and virtual environments(현실 및 가상 환경의 에이전트)  like the Jarvis in Iron Man(아이언맨의 자비스처럼).</p>
<p><img src="/images/agnet_ai/Untitled%201.png" alt="Untitled"></p>
<p><strong>Overview of an Agent AI system:</strong></p>
<p><img src="/images/agnet_ai/Untitled%202.png" alt="Untitled"></p>
<p><strong>Data flow:</strong></p>
<p><img src="/images/agnet_ai/Untitled%203.png" alt="Untitled"></p>
<p>We define “<strong>Agent AI</strong>” as a <strong>class of interactive systems</strong> that can </p>
<p><strong>perceive</strong> visual stimuli, language inputs, and other environmentally-grounded data, </p>
<p>and can produce meaningful embodied <strong>actions</strong>.</p>
<p>We explore systems that aim to <strong>improve agents</strong> based on next-embodied action prediction by incorporating external knowledge, multi-sensory inputs, and human feedback.</p>
<p><strong>mitigate(감소)</strong> the <strong>hallucinations</strong>(환각) of large foundation models and their tendency to generate environmentally <strong>incorrect outputs</strong></p>
<p>We envision a <strong>future</strong> where people can easily <strong>create</strong> any<br>virtual reality or simulated scene and <strong>interact with agents embodied within the virtual environment</strong>. (like the <strong>OASIS</strong> game in the film “<strong>Ready Player One</strong>” <strong>영화 ‘레디 플레이어 원’의 오아시스 게임처럼</strong> )</p>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p><strong>1.1 Motivation</strong></p>
<p>The AI community is on the cusp of a significant paradigm shift, transitioning from<br><strong>creating AI models for passive, structured tasks to models capable of assuming dynamic, agentic roles in diverse and complex environments.</strong></p>
<ul>
<li><strong>고도 구조화 고정 임무task 의 AI 모델 → 다양하고 복잡한 환경에서 역동적이고 Agent.</strong>   LLMs and VLMs    → a blend of linguistic proficiency, visual cognition, contextual memory, intuitive reasoning, and adaptability. 언어 능력, 시각 인지, 문맥 기억, 직관적 추론 및 적응력.  → gaming, robotics, and healthcare domains. 게임, 로봇 공학 및 의료 영역  →  redefine human experiences and elevate the operational standard. 인간의 경험을 재정립하고 업무 운용 수준을 높임.  →  transformative impacts on industries and socio-economic 산업과 사회경제에 대한 혁신 영향</li>
</ul>
<p><strong>1.2 Background</strong></p>
<p><strong>Large Foundation Models:</strong> can potentially tackle complex tasks</p>
<p>mathematical reasoning, professional law, generate complex plans for robots and game AI</p>
<p><strong>수학 문제, 법학 문제, 계획 세우기 등등….</strong></p>
<p><img src="/images/agnet_ai/Untitled%204.png" alt="Untitled"></p>
<p><strong>Embodied AI:</strong> leverages LLMs to perform task planning for robot</p>
<p>generate Python code → execute these code in low-level controller</p>
<p><img src="/images/agnet_ai/preview.gif" alt="preview.gif"></p>
<p><strong>Interactive Learning:</strong> </p>
<ol>
<li>Feedback-based learning The AI adapts its responses based on direct user feedback. <img src="/images/agnet_ai/Untitled%205.png" alt="Untitled"></li>
<li>Observational Learning:  The AI observes user interactions and learns implicitly. <img src="/images/agnet_ai/Untitled%206.png" alt="Untitled"></li>
</ol>
<h1 id="2-Agent-AI-Integration"><a href="#2-Agent-AI-Integration" class="headerlink" title="2. Agent AI Integration"></a>2. Agent AI Integration</h1><p><strong>Previous technology and future challenge</strong></p>
<p><strong>2.1 [Previous technology] Infinite AI agent</strong> </p>
<p> AI agent systems’ abilities:</p>
<ol>
<li>Predictive Modeling</li>
<li>Decision Making</li>
<li>Handling Ambiguity</li>
<li><strong>Continuous Improvement [Infinite AI agent]</strong> <strong>2D/3D embodied generation and editing interaction</strong> <img src="/images/agnet_ai/Untitled%207.png" alt="Untitled"> <strong>RoboGen: autonomously runs the cycles of task proposition, environment generation, and skill learning.</strong> <img src="/images/agnet_ai/Untitled%208.png" alt="[https://robogen-ai.github.io/videos/pipeline_cropped.mp4](https://robogen-ai.github.io/videos/pipeline_cropped.mp4)"> <a href="https://robogen-ai.github.io/videos/pipeline_cropped.mp4">https://robogen-ai.github.io/videos/pipeline_cropped.mp4</a></li>
</ol>
<p><strong>2.2 [Challenge] Agent AI with Large Foundation Models</strong></p>
<p><strong>2.2.1 Hallucinations(Fake answer)(환각)</strong></p>
<p><strong>2.2.2 Biases and Inclusivity(편견과 포용성)</strong></p>
<p>Training Data / Historical and Cultural Biases / Language and Context Limitations / Policies and Guidelines / Overgeneralization / Constant Monitoring and Updating / Amplification of Dominant Views / Ethical and Inclusive Design / User Guidelines</p>
<p>학습 데이터 / 역사 및 문화적 편견 / 언어 및 문맥의 한계 / 정책 및 가이드라인 / 지나친 일반화 / 지속적인 모니터링 및 업데이트 / 지배적인 견해의 확대 / 윤리적 및 포용적 디자인 / 사용자 가이드라인</p>
<p><strong>Mitigate(해결법):</strong></p>
<p>Diverse and Inclusive Training Data / Bias Detection and Correction / Ethical Guidelines and Policies / Diverse Representation / Bias Mitigation / Cultural Sensitivity / Accessibility / Language-based Inclusivity / Ethical and Respectful Interactions / User Feedback and Adaptation / Compliance with Inclusivity Guidelines</p>
<p><strong>2.2.3 Data Privacy and Usage</strong></p>
<p>Data Collection, Usage and Purpose / Storage and Security /  Data Deletion and Retention / Data Portability and Privacy Policy / Anonymization</p>
<p><strong>2.2.4 Interpretability and Explainability</strong></p>
<p>Imitation Learning → Decoupling   모방 학습 → 디커플링</p>
<p>Decoupling → Generalization   디커플링 → 일반화</p>
<p>Generalization → Emergent Behavior  일반화 → 새로운 행위</p>
<p><img src="/images/agnet_ai/Untitled%209.png" alt="Untitled"></p>
<p><strong>2.2.5 Inference Augmentation</strong></p>
<p>Data Enrichment / Algorithm Enhancement / Human-in-the-Loop (HITL) / Real-Time Feedback Integration / Cross-Domain Knowledge Transfer / Customization for Specific Use Cases / Ethical and Bias Considerations. / Continuous Learning and Adaptation</p>
<p>2.2.6 Regulation</p>
<p>To address unpredictable output(uncertainty) from the model.</p>
<p>→ Provide environmental information within the prompt</p>
<p>→ designing prompts to make LLM/VLMs include explanatory text</p>
<p><em>→ pre-execution verification and modification under human guidance</em></p>
<p><strong>2.3  [Challenge] Agent AI for Emergent Abilities[새로운 능력]</strong></p>
<p><strong>Current modeling</strong> practices require developers to <strong>prepare large datasets</strong> for each domain to <strong>finetune/pretrain models</strong>; however, this process is <strong>costly</strong> and even impossible if the <strong>domain is new.</strong></p>
<p><strong>⭐Unseen environments or scenarios?</strong></p>
<p><strong>The new emergent mechanism</strong> — Mixed Reality with Knowledge Inference Interaction</p>
<p>Enables the exploration of unseen environments for adaptation to virtual reality.</p>
<p><img src="/images/agnet_ai/Untitled%2010.png" alt="Untitled"></p>
<ol>
<li>Environment and Perception with task-planning and skill observation; </li>
<li>Agent learning; </li>
<li>Memory; </li>
<li>Agent action; </li>
<li>Cognition.</li>
</ol>
<h1 id="3-Agent-AI-Paradigm"><a href="#3-Agent-AI-Paradigm" class="headerlink" title="3 Agent AI Paradigm"></a><strong>3 Agent AI Paradigm</strong></h1><p>We seek to accomplish <strong>several goals</strong> with our <strong>proposed framework</strong>:</p>
<ul>
<li>Make use of existing <strong>pre-trained models and pre-training</strong> strategies to effectively bootstrap our agents with an effective <strong>understanding</strong> of important modalities, such as <strong>text or visual inputs</strong>.</li>
<li>Support for sufficient <strong>long-term task-planning capabilities</strong>.</li>
<li>Incorporate a framework for <strong>memory</strong> that allows for <strong>learned knowledge</strong> to be encoded and retrieved later.</li>
<li>Allow for <strong>environmental feedback</strong> to be used to effectively train the agent to learn which actions to take.</li>
</ul>
<p><strong>LLMs and VLMs|Agent Transformer Definition|Agent Transformer Creationc</strong></p>
<p><img src="/images/agnet_ai/Untitled%2011.png" alt="Untitled"></p>
<p><img src="/images/agnet_ai/Untitled%2012.png" alt="Untitled"></p>
<h1 id="4-Agent-AI-Learning"><a href="#4-Agent-AI-Learning" class="headerlink" title="4 Agent AI Learning"></a>4 Agent AI Learning</h1><p><strong>4.1 Strategy and Mechanism</strong></p>
<p>4.1.1 Reinforcement Learning (RL)</p>
<p>4.1.2 Imitation Learning (IL)</p>
<p>Seeks to leverage expert data to mimic the actions of experienced agents or experts</p>
<p><del>4.1.3 Traditional RGB</del></p>
<p><del>4.1.4 In-context Learning</del></p>
<p><del>4.1.5 Optimization in the Agent System</del></p>
<p><del>4.2 Agent Systems (zero-shot and few-shot level)</del></p>
<h1 id="5-Agent-AI-Categorization"><a href="#5-Agent-AI-Categorization" class="headerlink" title="5 Agent AI Categorization"></a>5 Agent AI Categorization</h1><p><img src="/images/agnet_ai/Untitled%2010.png" alt="Untitled"></p>
<p><strong>5.1 Generalist Agent Areas:</strong></p>
<p><strong>5.2 Embodied Agents</strong></p>
<p>5.2.1 Action Agents</p>
<p>5.2.2 Interactive Agents</p>
<p><strong>5.3 Simulation and Environments Agents</strong></p>
<p><strong>5.4 Generative Agents</strong></p>
<p>5.4.1 AR/VR/mixed-reality Agents</p>
<p><strong>5.5 Knowledge and Logical Inference Agents</strong></p>
<p>5.5.1 Knowledge Agent</p>
<p>5.5.2 Logic Agents</p>
<p>5.5.3 Agents for Emotional Reasoning</p>
<p>5.5.4 Neuro-Symbolic Agents</p>
<h1 id="6-Agent-AI-Application-Tasks"><a href="#6-Agent-AI-Application-Tasks" class="headerlink" title="6 Agent AI Application Tasks"></a>6 Agent AI Application Tasks</h1><p><strong>6.1 Agents for Gaming</strong></p>
<p><strong>NPC Behavior</strong></p>
<p><strong>Human-NPC Interaction</strong></p>
<p><strong>Agent-based Analysis of Gaming</strong></p>
<p><strong>Scene Synthesis for Gaming</strong></p>
<p><strong>6.2 Robotics</strong></p>
<p><strong>Visual Motor Control</strong></p>
<p><strong>Language Conditioned Manipulation</strong></p>
<p><strong>Skill Optimization</strong></p>
<p><strong>6.3 Healthcare</strong></p>
<p><strong>Diagnostic Agents.</strong></p>
<p><strong>Knowledge Retrieval Agents.</strong> </p>
<p><strong>Telemedicine and Remote Monitoring.</strong></p>
<p><strong>6.4 Multimodal Agents</strong></p>
<p><strong>6.4.1 Image-Language Understanding and Generation</strong></p>
<p><strong>6.4.2 Video and Language Understanding and Generation</strong></p>
<p><strong>6.6 Agent for NLP</strong></p>
<p><strong>6.6.1 LLM agent</strong></p>
<p><strong>6.6.2 General LLM agent</strong></p>
<p><strong>6.6.3 Instruction-following LLM agents</strong></p>
<h2 id="7-Agent-AI-Across-Modalities-Domains-and-Realities"><a href="#7-Agent-AI-Across-Modalities-Domains-and-Realities" class="headerlink" title="7 Agent AI Across Modalities, Domains, and Realities"></a>7 Agent AI Across Modalities, Domains, and Realities</h2><p><strong>7.1 Agents for Cross-modal Understanding(image, text, audio, video…)</strong></p>
<p><strong>7.2 Agents for Cross-domain Understanding</strong></p>
<p><strong>7.3 Interactive agent for cross-modality and cross-reality</strong></p>
<p><strong>7.4 Sim to Real Transfer</strong></p>
<h1 id="⭐8-Continuous-and-Self-improvement-for-Agent-AI"><a href="#⭐8-Continuous-and-Self-improvement-for-Agent-AI" class="headerlink" title="⭐8 Continuous and Self-improvement for Agent AI"></a><strong>⭐</strong>8 Continuous and Self-improvement for Agent AI</h1><p><strong>8.1 Human-based Interaction Data</strong></p>
<ul>
<li>Additional training data</li>
<li>Human preference learning(사람의 선택 학습)</li>
<li>Safety training (red-teaming)(보안)</li>
</ul>
<p><strong>8.2 Foundation Model Generated Data</strong></p>
<ul>
<li>LLM Instruction-tuning</li>
<li>Vision-language pairs</li>
</ul>
<h1 id="9-Agent-Dataset-and-Leaderboard"><a href="#9-Agent-Dataset-and-Leaderboard" class="headerlink" title="9 Agent Dataset and Leaderboard"></a>9 Agent Dataset and Leaderboard</h1><p><strong>9.1 “CuisineWorld” Dataset for Multi-agent Gaming</strong></p>
<p>• We provide a dataset and related the benchmark, called Microsoft <strong>MindAgent</strong> and correspondingly release a dataset “<strong>CuisineWorld</strong>” to the research community.</p>
<p><strong>Typo in 9.1.2 Task</strong></p>
<p><strong>9.2 Audio-Video-Language Pre-training Dataset</strong></p>
<ol>
<li><p>Video Text Retrieval</p>
</li>
<li><p>Video Assisted Informative Question Answering</p>
</li>
</ol>
<p><a href="https://multimodalagentai.github.io/">CVPR 2024 Tutorial on Generalist Agent AI</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>label-studio-ml-backend&#39;s segment_anything_model example bug fix: previous annotation disappearing after making new one</title>
    <url>/2023/09/10/label-studio-ml-backend-s-segment-anything-model-example-bug-fix-previous-annotation-disappearing-after-making-new-one/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>When I try to use <a href="https://github.com/HumanSignal/label-studio-ml-backend/tree/b2c31d34c0414befde3d0d067588617e062ef443/label_studio_ml/examples/segment_anything_model">Interactive Annotation in Label Studio with Segment Anything Model</a> Commits version: b2c31d3. I meet a problem, previous annotation is disappeared after making new annotation.(Latest version is fixed this problem[<a href="https://github.com/HumanSignal/label-studio-ml-backend/blob/master/label_studio_ml/examples/segment_anything_model/model.py">link</a>])</p>
<h1 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h1><p>To fix this problem, we need to modify the label-studio-ml-backend/label_studio_ml/examples/segment_anything_model/segment_anything_model.py file.<br>change the method to generate result id.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>to</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="built_in">str</span>(uuid4())[:<span class="number">4</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Problem</tag>
      </tags>
  </entry>
  <entry>
    <title>关于各被制裁行业的统一标准的制定——“统一规范制定联盟”成立的必要性</title>
    <url>/2024/03/17/%E5%85%B3%E4%BA%8E%E5%90%84%E8%A2%AB%E5%88%B6%E8%A3%81%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%BB%9F%E4%B8%80%E6%A0%87%E5%87%86%E7%9A%84%E5%88%B6%E5%AE%9A%E2%80%94%E2%80%94%E2%80%9C%E7%BB%9F%E4%B8%80%E8%A7%84%E8%8C%83%E5%88%B6%E5%AE%9A%E8%81%94%E7%9B%9F%E2%80%9D%E6%88%90%E7%AB%8B%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/</url>
    <content><![CDATA[<p>由于我们近百年来的落后发展和来自西方资本为主的国际社会的排斥，虽然我们在最近几十年几代人的拼命努力，我们终于在大部分领域追到了世界前列的水平。</p>
<p>但是，由于大部分行业和领域都起始于西方社会，我们为了迎合国际市场，不得不遵守西方定制的统一规范标准，这在我看来是非常危险的一件事情。诚然，全世界如果都能在同一行业使用同一套标准来生产产品可以使得各企业之间的产品拥有更好的互利互通性，但是，却无法避免的存在非常多的不确定性,比如：</p>
<ol>
<li><strong>无法保证规范标准没有利好偏向</strong>：以我的经验来看，大部分西方定制的标准都存在一定的利好偏向的。几大行业寡头，为了定制有利于自己产品生产的规范，会联合起来定制一些并没有那么符合实际的规范标准。</li>
<li><strong>无法保证某些标准不存在专利寡头</strong>：由于有些标准确立初始只有某些特定的企业有于其匹配的专利产品，一旦这种标准被确定，几乎就等于所有企业都得购买特定企业的专利才能进行生产，这种标准也是非常的不合理的。</li>
<li><strong>无法保证国家制裁导致的标准制裁</strong>：在某些情况下，由于被制裁，我们甚至无法被允许和国际社会使用同一套标准，因为标准中往往会出现第2点中提到的专利寡头。</li>
</ol>
<p>因此，基于现在的严峻形式，我觉得我们各行各业的同胞们，应该定制我们自己的规范联盟，凡防于为来。</p>
<p>其实，关于标准定制竞争的成功案例，我们其实已经有了很多先例，比如银联与visa，master之争，华为的5G规范之争，但是，我仍然认为，这些规范的定义仍然是在西方集团框架之下的抵抗。但是我在反思，为什么我们不能跳出西方框架，自己走一条自己的路呢？我们的产品远销全世界，我们的产品质量也是最好的，我们有自己的技术，自己的销售渠道，为什么要听他人的标准呢？我们各行业的企业家们,为什么不可以按照自己的标准来生产产品呢? 为什么我们不能成立一个像IEEE那像的行业标准定制联盟呢？</p>
<p>我认为，基于国情，我们的行业标准定制联盟，不能完全模仿西方世界的方法。我们应该发展我们自己特色的行业定制联盟。以下是我的几点想法：</p>
<ol>
<li><strong>踩着别人的肩膀过河</strong>：如题，我们白手起家，完全重新定义一些标准也是不现实的，我们完全可以模仿他人已经定制好的标准，再经过一定的改进，定制自己的标准。特别是某一些行业，别人都不带我们玩了，我们也没必要客气，没必要有什么契约精神和道德规范，就是模仿之后再定制我们自己的规范就好，踩着别人的肩膀过河，站在“巨人”的肩膀做事嘛。</li>
<li><strong>做新型领域开拓者</strong>：对于成熟的行业，我们可以“踩着别人的肩膀过河”，而对于新兴的行业，我们应该有自己的行业自行，直接定制自己的行业规范和标准。特别是AI，芯片和操作系统这些领域，我们必须自己定制自己的标准，大家一起集中力量做大做强，这些领域急需整个行业的人一起努力来摆脱制裁。</li>
<li><strong>各企业团结起来</strong>：我们既然要定自己的标准规范，自然也要有人去定制和遵守，这点上我呼吁各行业各企业之间摈弃以往因为竞争带来的嫌隙，理解唇亡齿寒的道理。大企业带头，大家团结一致，一起定制符合行业持续发展的标准和规范。</li>
<li><strong>前置专利共享</strong>：定制标注和规范，不可避免的存在一些前置专利的问题，我认为，我们企业之间要是能大方免费或者低价共享这些前置专利的话，那将是百利无害的。毕竟没有市场的专利是无法转换为利益的。</li>
<li><strong>政府参与控制</strong>：我认为企业以逐利为唯一目的是无可厚非的，但是我们不能忽视了消费者和国家人民的利益，政府的适量参与和干预还是非常有必要的。至于为什么不能直接由政府直接定制规范，毕竟专业的事让专业的人做可能会更加合适。</li>
</ol>
<p>总的来说，我在这里是呼吁各行各业的企业们团结起来，我们一起成立一个“统一规范制定联盟”，大家一起定制我们自己的行业标准，一起避免被外部势力卡脖子的现象发生。拿操作系统举例，近几年国内操作系统发展迅猛，但是各个企业之间也各自为营，做着自己标准的事情，这非此不利于操作系统上层的软件生态的开发，各企业之间若是能开诚布公，共享自己的专利，规范和标准，不重复造车，集中力量做好一套标准系统，软件开发者一次代码构建，便可应用在各个操作系统中，将会大大吸引广大开发者的开发热忱。</p>
<p>以上都是我的一些胡言乱语，疯狂头脑风暴，在内行人看来可能非常不现实甚至是搞笑。读者要是看了觉得有道理，可以联系我，大家一起深入探讨构建更好的蓝图，要是觉得是个笑话，就请您全当是个笑话，一笑而过吧。</p>
]]></content>
      <tags>
        <tag>Idle talk</tag>
      </tags>
  </entry>
</search>
