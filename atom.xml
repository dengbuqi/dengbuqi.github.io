<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dengbuqi&#39;s Blog</title>
  
  <subtitle>-- AI Worker</subtitle>
  <link href="https://dengbuqi.github.io/atom.xml" rel="self"/>
  
  <link href="https://dengbuqi.github.io/"/>
  <updated>2024-03-12T06:47:46.313Z</updated>
  <id>https://dengbuqi.github.io/</id>
  
  <author>
    <name>Dengbuqi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My rethink about Image generation and recognition</title>
    <link href="https://dengbuqi.github.io/2024/03/12/My-rethink-about-Image-generation-and-recognition/"/>
    <id>https://dengbuqi.github.io/2024/03/12/My-rethink-about-Image-generation-and-recognition/</id>
    <published>2024-03-12T02:48:02.000Z</published>
    <updated>2024-03-12T06:47:46.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="My-rethink-about-Image-generation-and-recognition"><a href="#My-rethink-about-Image-generation-and-recognition" class="headerlink" title="My rethink about Image generation and recognition"></a>My rethink about Image generation and recognition</h1><p>英文部分是Notion机器翻译</p><p>人类的大脑是图像生成最利害的机器，虽然我们无法直接向外表现出来，但是我们可以在大脑中想象出千奇百怪的东西，甚至在我们的梦境中，我们可以完全畅游在自由想像的世界。</p><p>The human brain is the most potent image generation machine. Although we can’t express it directly, we can imagine all sorts of things in our brains. Even in our dreams, we can fully roam the world of free imagination.</p><p>但是，我们人类是如何在脑中生成这些东西的呢？在我的理解中，纵使我们可以想象出任何东西，但是这个“任何东西”，很难超过我们的认知范围，即我们常说的想象的局限性。</p><p>But how do we humans generate these things in our minds? In my understanding, though we can imagine anything, this “anything” is hard to exceed our cognitive range, which is often referred to as the limitation of imagination.</p><p>我认为我们拥有这种局限性的原因是因为我们需要先<strong>观察</strong>已有的事物，然后<strong>抽象</strong>和<strong>思考</strong>这个事物的特征，才能<strong>想象</strong>出基于这个事物部分特征的其他事物。</p><p>I believe we have this limitation because we need to <strong>observe</strong> existing things first, then <strong>abstract</strong> and <strong>think</strong> about the features of this thing, in order to <strong>imagine</strong> other things based on some features of this thing.</p><p>因此，如果我们遵从人类的思考方式创建AI模型的话，我假设模型分为3部分： 观察，想象和思考。</p><p>Therefore, if we create AI models following human thinking, I assume the model is divided into three parts: observation, imagination, and thinking.</p><p><img src="/images/humangen.drawio.png" alt="humangen.drawio.png"></p><p>上图就是我认为的一个人类大脑的思维逻辑，或者说是一种图像生成的AI模型的结构，该结构有点类似于GAN(Generative Adversarial Network)模型。</p><p>The above figure is what I think is the logic of human brain thinking, or the structure of an image generation AI model, which is somewhat similar to the GAN (Generative Adversarial Network) model.</p><p><strong>Observation</strong>: 我们将会观察真实图片，学习并提取真实图片的隐藏特征值(Hidden Feature)。</p><p><strong>Observation</strong>: We will observe real images, learn and extract the hidden features of real images.</p><p><strong>Hidden Feature</strong>: 观察到的特征值会被应用于两个方面，一方面是用于思考，一方面是用于生成图片。</p><p><strong>Hidden Feature</strong>: The observed features will be applied in two ways, one for thinking and one for generating images.</p><p><strong>Imagination</strong>: 我们通过总结到的Hidden Feature，可以试图生成一张新的图片，这张图片和原图Real image很相似，但是又不同，目的是为了生成一张能够让observation提取到和Real image相似特征的图片。</p><p><strong>Imagination</strong>: We can try to generate a new image through the summarized Hidden Feature. This image is similar to the original Real image, but different. The purpose is to generate an image that allows the observation to extract features similar to the Real image.</p><p>让我们重新回到我们人类的思考学习方式上，当我们牙牙学语时候，假设我们认识“车”这个单词，老师会给我们一张车的图片卡，然后反复教我们这个东西是“车”。当我们记住了这张图片和与之对应的单词“车”之后，神奇的一幕发生了，即便我们看到了另一个模样的车之后，我们仍然能够“猜”出这是车！而这样神奇的能力我认为可以归因于人类想象力。因为人类在看到“车”的图片卡之后，我们不但是学习了车这个图片的特征，还学习到了很多抽象的特征，比如车有四个轮子，有方向盘等等，并基于这些抽象特征，天马行空的想象出了不同的车，而这些想象出来的车的样子，也有利于我们去识别真正现实中的车。在通过N次的对真实图片和想象图片的观察之后，我们便能思考“车”是什么，同是也具备了想象车的样子的模型。如下图：</p><p>Let’s return to our human thinking learning mode. When we were babbling, suppose we knew the word “car”, the teacher would give us a picture card of a car, and repeatedly teach us that this thing is a “car”. After we remembered this picture and the corresponding word “car”, a miraculous scene happened. Even if we saw another car, we could still “guess” it was a car! I attribute such magical ability to human imagination. Because after seeing the picture card of the “car”, we not only learned the features of the car picture, but also learned many abstract features, such as the car has four wheels, a steering wheel, etc., and based on these abstract features, the sky-horse-like imagination came out. Different cars, and the appearance of these imagined cars, are also conducive to our identification of real cars in reality. After observing the real image and the imagined image for N times, we can think about what a “car” is, and also have a model that imagines the appearance of a car. As below:</p><p><img src="/images/baby_learn.drawio.png" alt="baby_learn.drawio.png"></p><p><strong>Thinking</strong>: 对于特征的思考，我们大致需要思考两个方面的问题：</p><p>图片是真的还是想象出来的？</p><p>一个真假二分类问题</p><p>图像描述的是什么？</p><p>一个NLP描述问题</p><p><strong>Thinking</strong>: For thinking about features, we generally need to think about two aspects:</p><p>Is the picture real or imagined?</p><p>A true or false binary classification problem</p><p>What does the image describe?</p><p>An NLP description problem</p><p>因此，基于这一套思维逻辑，我们或许能够制作一个one-shot或者few-shot的模型，通过反复观测(Observation)和想象(Imagination)同一张图片并对他们进行思考，我们或许能生三个模型：encoder，generator,和thinker三个模型。如下图：</p><p>Therefore, based on this set of thinking logic, we may be able to make a one-shot or few-shot model, through repeated observation (Observation) and imagination (Imagination) of the same picture and thinking about them, we may be able to generate three models: encoder, generator, and thinker. As below:</p><p><img src="/images/aigen.drawio.png" alt="aigen.drawio.png"></p><p>Loss 的设计，当我们设计loss函数的时候，主要是帧对在Thinker模块的输出，Real和Fake和对应的NLP描述均可以设计对应的距离loss函数。</p><p>When designing the Loss function, it is mainly designed for the output of the Thinker module, both Real and Fake and the corresponding NLP description can design the corresponding distance loss function.</p><p>以上便是我对于人类学习和AI学习的一点点思考。</p><p>The above is a little bit of my thinking about human learning and AI learning.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;My-rethink-about-Image-generation-and-recognition&quot;&gt;&lt;a href=&quot;#My-rethink-about-Image-generation-and-recognition&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
    <category term="Brainstorm" scheme="https://dengbuqi.github.io/tags/Brainstorm/"/>
    
  </entry>
  
  <entry>
    <title>label-studio-ml-backend&#39;s segment_anything_model example bug fix: previous annotation disappearing after making new one</title>
    <link href="https://dengbuqi.github.io/2023/09/10/label-studio-ml-backend-s-segment-anything-model-example-bug-fix-previous-annotation-disappearing-after-making-new-one/"/>
    <id>https://dengbuqi.github.io/2023/09/10/label-studio-ml-backend-s-segment-anything-model-example-bug-fix-previous-annotation-disappearing-after-making-new-one/</id>
    <published>2023-09-10T04:46:08.000Z</published>
    <updated>2023-09-10T04:59:59.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>When I try to use <a href="https://github.com/HumanSignal/label-studio-ml-backend/tree/b2c31d34c0414befde3d0d067588617e062ef443/label_studio_ml/examples/segment_anything_model">Interactive Annotation in Label Studio with Segment Anything Model</a> Commits version: b2c31d3. I meet a problem, previous annotation is disappeared after making new annotation.(Latest version is fixed this problem[<a href="https://github.com/HumanSignal/label-studio-ml-backend/blob/master/label_studio_ml/examples/segment_anything_model/model.py">link</a>])</p><h1 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h1><p>To fix this problem, we need to modify the label-studio-ml-backend/label_studio_ml/examples/segment_anything_model/segment_anything_model.py file.<br>change the method to generate result id.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="built_in">str</span>(uuid4())[:<span class="number">4</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;When I try to use &lt;a href=&quot;https://github.com/Huma</summary>
      
    
    
    
    
    <category term="label-studio, SAM" scheme="https://dengbuqi.github.io/tags/label-studio-SAM/"/>
    
  </entry>
  
  <entry>
    <title>Combat Effectiveness(CE) Detection</title>
    <link href="https://dengbuqi.github.io/2023/03/23/Combat-Effectiveness-CE-Detection/"/>
    <id>https://dengbuqi.github.io/2023/03/23/Combat-Effectiveness-CE-Detection/</id>
    <published>2023-03-23T08:24:06.000Z</published>
    <updated>2024-03-12T02:42:58.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Combat-Effectiveness-Detection-using-YOLOv8-and-Tensorflow-js"><a href="#Combat-Effectiveness-Detection-using-YOLOv8-and-Tensorflow-js" class="headerlink" title="Combat Effectiveness Detection using YOLOv8 and Tensorflow.js"></a>Combat Effectiveness Detection using YOLOv8 and Tensorflow.js</h1><p align="center">  <img src="/images/ce.jpg" /></p><p><img src="https://img.shields.io/badge/Made%20with-%F0%9F%96%A4-white" alt="love"><br><img src="https://img.shields.io/badge/tensorflow.js-white?logo=tensorflow" alt="tensorflow.js"></p><hr><p>Combat Effectveness Detection application right in your browser. Serving YOLOv8 in browser using tensorflow.js<br>with <code>webgl</code> backend.</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p><a href="https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/">Check it!</a></p><ul><li><a href="https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/">https://dengbuqi.github.io/Combat-Effectiveness-Detection_yolov8-tfjs/</a></li></ul><p><strong>Setup</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dengbuqi/Combat-Effectiveness-Detection_yolov8-tfjs</span><br><span class="line"><span class="built_in">cd</span> Combat-Effectiveness-Detection_yolov8-tfjs</span><br><span class="line">yarn install <span class="comment">#Install dependencies</span></span><br></pre></td></tr></table></figure><p><strong>Scripts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn start <span class="comment"># Start dev server</span></span><br><span class="line">yarn build <span class="comment"># Build for productions</span></span><br></pre></td></tr></table></figure><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>YOLOv8n model converted to tensorflow.js.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">used model : <span class="type">yolov8n</span></span><br><span class="line">size       : 13 <span class="type">Mb</span></span><br></pre></td></tr></table></figure><p><strong>Use another model</strong></p><p>Use another YOLOv8 model.</p><ol><li><p>Export YOLOv8 model to tfjs format. Read more on the <a href="https://docs.ultralytics.com/tasks/detection/#export">official documentation</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># load an official model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Export the model</span></span><br><span class="line">model.export(<span class="built_in">format</span>=<span class="string">&quot;tfjs&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Copy <code>yolov8*_web_model</code> to <code>./public</code></p></li><li><p>Update <code>modelName</code> in <code>App.jsx</code> to new model name</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// model configs</span></span><br><span class="line"><span class="keyword">const</span> modelName = <span class="string">&quot;yolov8*&quot;</span>; <span class="comment">// change to new model name</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Done! 😊</p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/ultralytics/ultralytics">https://github.com/ultralytics/ultralytics</a></li><li><a href="https://github.com/Hyuto/yolov8-onnxruntime-web">https://github.com/Hyuto/yolov8-onnxruntime-web</a></li><li><a href="https://github.com/Hyuto/yolov8-tfjs">https://github.com/Hyuto/yolov8-tfjs</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Combat-Effectiveness-Detection-using-YOLOv8-and-Tensorflow-js&quot;&gt;&lt;a href=&quot;#Combat-Effectiveness-Detection-using-YOLOv8-and-Tensorflow-</summary>
      
    
    
    
    
    <category term="YOLOv8" scheme="https://dengbuqi.github.io/tags/YOLOv8/"/>
    
  </entry>
  
  <entry>
    <title>Heartbeat-Estimation</title>
    <link href="https://dengbuqi.github.io/2023/03/23/Heartbeat-Estimation/"/>
    <id>https://dengbuqi.github.io/2023/03/23/Heartbeat-Estimation/</id>
    <published>2023-03-23T08:03:36.000Z</published>
    <updated>2024-03-12T02:43:04.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="heartbeat-js-FaceAPI-heart-pulse-rate-monitoring"><a href="#heartbeat-js-FaceAPI-heart-pulse-rate-monitoring" class="headerlink" title="heartbeat-js + FaceAPI heart pulse rate monitoring"></a>heartbeat-js + FaceAPI heart pulse rate monitoring</h1><p>This project combines the <a href="https://github.com/prouast/heartbeat-js">heartbeat-js</a> and <a href="https://github.com/justadudewhohacks/face-api.js/">FaceAPI</a><br>By detecting the human face using FaceAPI, we can estimate the heart pulse rate using rPPG method implemented by hearbeat-js project.</p><p align="center">  <img src="/images/heartbeat.jpg" /></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>Check the demo <a href="https://dengbuqi.github.io/heartbeat-js-FaceAPI/">here~</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;heartbeat-js-FaceAPI-heart-pulse-rate-monitoring&quot;&gt;&lt;a href=&quot;#heartbeat-js-FaceAPI-heart-pulse-rate-monitoring&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="Heart beat monitor" scheme="https://dengbuqi.github.io/tags/Heart-beat-monitor/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dengbuqi.github.io/2021/02/25/hello-world/"/>
    <id>https://dengbuqi.github.io/2021/02/25/hello-world/</id>
    <published>2021-02-25T03:37:51.690Z</published>
    <updated>2021-02-25T03:37:51.690Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
